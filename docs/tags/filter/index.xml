<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>filter on &#39;Moais blog</title>
    <link>https://moematsuda-ai.github.io/tags/filter/index.html</link>
    <description>Recent content in filter on &#39;Moais blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 22 Nov 2022 08:09:03 +0000</lastBuildDate><atom:link href="https://moematsuda-ai.github.io/tags/filter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Filter with python</title>
      <link>https://moematsuda-ai.github.io/python/filter/index.html</link>
      <pubDate>Tue, 22 Nov 2022 08:09:03 +0000</pubDate>
      <guid>https://moematsuda-ai.github.io/python/filter/index.html</guid>
      <description>filtfiltを用いたバンドパスフィルタ(バターワースフィルタ)の記述例 #バターワースフィルタ（バンドパス） fp = np.array([25, 50]) #通過域端周波数[Hz] fs = np.array([10, 100]) #阻止域端周波数[Hz] gpass = 3 #通過域端最大損失[dB] gstop = 40 #阻止域端最小損失[dB] def bandpass(x, samplerate, fp, fs, gpass, gstop):#samplerate がサンプリング周波数 fn = samplerate / 2 #ナイキスト周波数 wp = fp / fn #ナイキスト周波数で通過域端周波数を正規化 ws = fs / fn #ナイキスト周波数で阻止域端周波数を正規化 N, Wn = signal.buttord(wp, ws, gpass, gstop) #オーダーとバターワースの正規化周波数を計算 b, a = signal.butter(N, Wn, &amp;#39;bandpass&amp;#39;) #フィルタ伝達関数の分子と分母を計算 y = signal.filtfilt(b, a, x) #信号に対してフィルタをかける return y #フィルタ後の信号を返す y = bandpass(f_biceps, samplerate, fp, fs, gpass, gstop) scipy.</description>
    </item>
  </channel>
</rss>